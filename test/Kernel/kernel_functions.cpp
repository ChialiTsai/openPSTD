//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 2-1-2016
//
//
// Authors: Omar Richardson, Louis van Harten
//
//
// Purpose: Test suite for kernel functions
//
//
//////////////////////////////////////////////////////////////////////////


#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include "../../kernel/core/kernel_functions.h"
#include <kernel/PSTDKernel.h>
#include <cmath>

using namespace OpenPSTD::Kernel;
using namespace std;
using namespace Eigen;
BOOST_AUTO_TEST_SUITE(kernel_functions)

    BOOST_AUTO_TEST_CASE(test_next_2_power) {
        BOOST_CHECK_EQUAL(next_2_power(42), 64);
        BOOST_CHECK_EQUAL(next_2_power(3.4), 4);
        BOOST_CHECK_EQUAL(next_2_power(0.1), 1);
    }

    BOOST_AUTO_TEST_CASE(test_rho_array_one_neighbour) {
        float air_dens = 1.2;
        float max_rho = 1E10;
        Array<float, 4, 2> velocity;
        Array<float, 4, 2> pressure;
        velocity << -1, 1, 0, 0, 0, 2, 1, 1;
        pressure << 1, -1, 0, 0, 2, 0, 1, 1;
        RhoArray rhoArray = get_rho_array(max_rho, air_dens, air_dens);
        BOOST_CHECK(rhoArray.pressure.isApprox(pressure));
        BOOST_CHECK(rhoArray.velocity.isApprox(velocity));
    }

    BOOST_AUTO_TEST_CASE(test_rho_array_two_neighbour) {
        float air_dens = 1.2;
        Array<float, 4, 2> velocity;
        Array<float, 4, 2> pressure;
        velocity << 0, 0, 0, 0, 1, 1, 1, 1;
        pressure << 0, 0, 0, 0, 1, 1, 1, 1;
        RhoArray rhoArray = get_rho_array(air_dens, air_dens, air_dens);
        BOOST_CHECK(rhoArray.pressure.isApprox(pressure));
        BOOST_CHECK(rhoArray.velocity.isApprox(velocity));
    }

    BOOST_AUTO_TEST_CASE(test_get_grid_spacing) {
        PSTDSettings settings;
        settings.SetSoundSpeed(340);
        settings.SetMaxFrequency(84000);
        BOOST_CHECK(get_grid_spacing(settings) <= 0.0020238);
        settings.SetSoundSpeed(340);
        settings.SetMaxFrequency(20000);
        BOOST_CHECK(get_grid_spacing(settings) <= 0.0085);
        settings.SetSoundSpeed(340);
        settings.SetMaxFrequency(200);
        BOOST_CHECK(get_grid_spacing(settings) <= 0.85);
        settings.SetSoundSpeed(340);
        settings.SetMaxFrequency(20);
        BOOST_CHECK(get_grid_spacing(settings) <= 8.5);
    }

    BOOST_AUTO_TEST_CASE(test_spatderp3) {
        Eigen::ArrayXXf d1v(1,51), d1p(1,50), d2p(1,50), d2v(1,51), d3v(1,51), d3p(1,50);
        Eigen::ArrayXcf derfact_p(128), derfact_v(128);
        Eigen::ArrayXf real_p(128), imag_p(128), real_v(128), imag_v(128);

        d1p.row(0).setLinSpaced(-19.8, -0.2);
        d1v.row(0).setLinSpaced(-20, 0);
        d3p.row(0).setLinSpaced(20.2, 39.8);
        d3v.row(0).setLinSpaced(20, 40);

        d2p.row(0).setLinSpaced(0.2, 19.8);
        d2v.row(0).setLinSpaced(0, 20);

        real_p << 0.00000000e+00, 3.01166185e-03, 1.20430192e-02, 2.70831905e-02, 4.81140512e-02, 7.51102496e-02, 1.08039230e-01, 1.46861262e-01, 1.91529476e-01, 2.41989907e-01, 2.98181542e-01, 3.60036376e-01, 4.27479473e-01, 5.00429034e-01, 5.78796470e-01, 6.62486486e-01, 7.51397162e-01, 8.45420051e-01, 9.44440271e-01, 1.04833662e+00, 1.15698166e+00, 1.27024188e+00, 1.38797777e+00, 1.51004397e+00, 1.63628940e+00, 1.76655741e+00, 1.90068588e+00, 2.03850743e+00, 2.17984953e+00, 2.32453465e+00, 2.47238048e+00, 2.62320003e+00, 2.77680184e+00, 2.93299013e+00, 3.09156503e+00, 3.25232270e+00, 3.41505557e+00, 3.57955249e+00, 3.74559896e+00, 3.91297732e+00, 4.08146692e+00, 4.25084437e+00, 4.42088374e+00, 4.59135674e+00, 4.76203297e+00, 4.93268010e+00, 5.10306413e+00, 5.27294956e+00, 5.44209966e+00, 5.61027667e+00, 5.77724203e+00, 5.94275659e+00, 6.10658086e+00, 6.26847523e+00, 6.42820020e+00, 6.58551662e+00, 6.74018588e+00, 6.89197020e+00, 7.04063282e+00, 7.18593822e+00, 7.32765241e+00, 7.46554307e+00, 7.59937988e+00, 7.72893466e+00, 7.85398163e+00, 7.72893466e+00, 7.59937988e+00, 7.46554307e+00, 7.32765241e+00, 7.18593822e+00, 7.04063282e+00, 6.89197020e+00, 6.74018588e+00, 6.58551662e+00, 6.42820020e+00, 6.26847523e+00, 6.10658086e+00, 5.94275659e+00, 5.77724203e+00, 5.61027667e+00, 5.44209966e+00, 5.27294956e+00, 5.10306413e+00, 4.93268010e+00, 4.76203297e+00, 4.59135674e+00, 4.42088374e+00, 4.25084437e+00, 4.08146692e+00, 3.91297732e+00, 3.74559896e+00, 3.57955249e+00, 3.41505557e+00, 3.25232270e+00, 3.09156503e+00, 2.93299013e+00, 2.77680184e+00, 2.62320003e+00, 2.47238048e+00, 2.32453465e+00, 2.17984953e+00, 2.03850743e+00, 1.90068588e+00, 1.76655741e+00, 1.63628940e+00, 1.51004397e+00, 1.38797777e+00, 1.27024188e+00, 1.15698166e+00, 1.04833662e+00, 9.44440271e-01, 8.45420051e-01, 7.51397162e-01, 6.62486486e-01, 5.78796470e-01, 5.00429034e-01, 4.27479473e-01, 3.60036376e-01, 2.98181542e-01, 2.41989907e-01, 1.91529476e-01, 1.46861262e-01, 1.08039230e-01, 7.51102496e-02, 4.81140512e-02, 2.70831905e-02, 1.20430192e-02, 3.01166185e-03;
        imag_p << 0.00000000e+00, 1.22681503e-01, 2.45141287e-01, 3.67157856e-01, 4.88510160e-01, 6.08977815e-01, 7.28341326e-01, 8.46382306e-01, 9.62883697e-01, 1.07762999e+00, 1.19040744e+00, 1.30100429e+00, 1.40921097e+00, 1.51482031e+00, 1.61762777e+00, 1.71743163e+00, 1.81403322e+00, 1.90723707e+00, 1.99685118e+00, 2.08268715e+00, 2.16456044e+00, 2.24229050e+00, 2.31570101e+00, 2.38462001e+00, 2.44888015e+00, 2.50831879e+00, 2.56277824e+00, 2.61210587e+00, 2.65615433e+00, 2.69478167e+00, 2.72785150e+00, 2.75523316e+00, 2.77680184e+00, 2.79243874e+00, 2.80203121e+00, 2.80547286e+00, 2.80266368e+00, 2.79351018e+00, 2.77792552e+00, 2.75582955e+00, 2.72714900e+00, 2.69181751e+00, 2.64977574e+00, 2.60097147e+00, 2.54535965e+00, 2.48290251e+00, 2.41356958e+00, 2.33733779e+00, 2.25419149e+00, 2.16412252e+00, 2.06713025e+00, 1.96322159e+00, 1.85241105e+00, 1.73472072e+00, 1.61018033e+00, 1.47882721e+00, 1.34070633e+00, 1.19587027e+00, 1.04437922e+00, 8.86300945e-01, 7.21710769e-01, 5.50691541e-01, 3.73333594e-01, 1.89734696e-01, 4.80917673e-16, 1.89734696e-01, -3.73333594e-01, 5.50691541e-01, -7.21710769e-01, 8.86300945e-01, -1.04437922e+00, 1.19587027e+00, -1.34070633e+00, 1.47882721e+00, -1.61018033e+00, 1.73472072e+00, -1.85241105e+00, 1.96322159e+00, -2.06713025e+00, 2.16412252e+00, -2.25419149e+00, 2.33733779e+00, -2.41356958e+00, 2.48290251e+00, -2.54535965e+00, 2.60097147e+00, -2.64977574e+00, 2.69181751e+00, -2.72714900e+00, 2.75582955e+00, -2.77792552e+00, 2.79351018e+00, -2.80266368e+00, 2.80547286e+00, -2.80203121e+00, 2.79243874e+00, -2.77680184e+00, 2.75523316e+00, -2.72785150e+00, 2.69478167e+00, -2.65615433e+00, 2.61210587e+00, -2.56277824e+00, 2.50831879e+00, -2.44888015e+00, 2.38462001e+00, -2.31570101e+00, 2.24229050e+00, -2.16456044e+00, 2.08268715e+00, -1.99685118e+00, 1.90723707e+00, -1.81403322e+00, 1.71743163e+00, -1.61762777e+00, 1.51482031e+00, -1.40921097e+00, 1.30100429e+00, -1.19040744e+00, 1.07762999e+00, -9.62883697e-01, 8.46382306e-01, -7.28341326e-01, 6.08977815e-01, -4.88510160e-01, 3.67157856e-01, -2.45141287e-01, 1.22681503e-01;

        real_v << 0.00000000e+00, -3.01166185e-03, -1.20430192e-02, -2.70831905e-02, -4.81140512e-02, -7.51102496e-02, -1.08039230e-01, -1.46861262e-01, -1.91529476e-01, -2.41989907e-01, -2.98181542e-01, -3.60036376e-01, -4.27479473e-01, -5.00429034e-01, -5.78796470e-01, -6.62486486e-01, -7.51397162e-01, -8.45420051e-01, -9.44440271e-01, -1.04833662e+00, -1.15698166e+00, -1.27024188e+00, -1.38797777e+00, -1.51004397e+00, -1.63628940e+00, -1.76655741e+00, -1.90068588e+00, -2.03850743e+00, -2.17984953e+00, -2.32453465e+00, -2.47238048e+00, -2.62320003e+00, -2.77680184e+00, -2.93299013e+00, -3.09156503e+00, -3.25232270e+00, -3.41505557e+00, -3.57955249e+00, -3.74559896e+00, -3.91297732e+00, -4.08146692e+00, -4.25084437e+00, -4.42088374e+00, -4.59135674e+00, -4.76203297e+00, -4.93268010e+00, -5.10306413e+00, -5.27294956e+00, -5.44209966e+00, -5.61027667e+00, -5.77724203e+00, -5.94275659e+00, -6.10658086e+00, -6.26847523e+00, -6.42820020e+00, -6.58551662e+00, -6.74018588e+00, -6.89197020e+00, -7.04063282e+00, -7.18593822e+00, -7.32765241e+00, -7.46554307e+00, -7.59937988e+00, -7.72893466e+00, -7.85398163e+00, -7.72893466e+00, -7.59937988e+00, -7.46554307e+00, -7.32765241e+00, -7.18593822e+00, -7.04063282e+00, -6.89197020e+00, -6.74018588e+00, -6.58551662e+00, -6.42820020e+00, -6.26847523e+00, -6.10658086e+00, -5.94275659e+00, -5.77724203e+00, -5.61027667e+00, -5.44209966e+00, -5.27294956e+00, -5.10306413e+00, -4.93268010e+00, -4.76203297e+00, -4.59135674e+00, -4.42088374e+00, -4.25084437e+00, -4.08146692e+00, -3.91297732e+00, -3.74559896e+00, -3.57955249e+00, -3.41505557e+00, -3.25232270e+00, -3.09156503e+00, -2.93299013e+00, -2.77680184e+00, -2.62320003e+00, -2.47238048e+00, -2.32453465e+00, -2.17984953e+00, -2.03850743e+00, -1.90068588e+00, -1.76655741e+00, -1.63628940e+00, -1.51004397e+00, -1.38797777e+00, -1.27024188e+00, -1.15698166e+00, -1.04833662e+00, -9.44440271e-01, -8.45420051e-01, -7.51397162e-01, -6.62486486e-01, -5.78796470e-01, -5.00429034e-01, -4.27479473e-01, -3.60036376e-01, -2.98181542e-01, -2.41989907e-01, -1.91529476e-01, -1.46861262e-01, -1.08039230e-01, -7.51102496e-02, -4.81140512e-02, -2.70831905e-02, -1.20430192e-02, -3.01166185e-03;
        imag_v << 0.00000000e+00, 1.22681503e-01, 2.45141287e-01, 3.67157856e-01, 4.88510160e-01, 6.08977815e-01, 7.28341326e-01, 8.46382306e-01, 9.62883697e-01, 1.07762999e+00, 1.19040744e+00, 1.30100429e+00, 1.40921097e+00, 1.51482031e+00, 1.61762777e+00, 1.71743163e+00, 1.81403322e+00, 1.90723707e+00, 1.99685118e+00, 2.08268715e+00, 2.16456044e+00, 2.24229050e+00, 2.31570101e+00, 2.38462001e+00, 2.44888015e+00, 2.50831879e+00, 2.56277824e+00, 2.61210587e+00, 2.65615433e+00, 2.69478167e+00, 2.72785150e+00, 2.75523316e+00, 2.77680184e+00, 2.79243874e+00, 2.80203121e+00, 2.80547286e+00, 2.80266368e+00, 2.79351018e+00, 2.77792552e+00, 2.75582955e+00, 2.72714900e+00, 2.69181751e+00, 2.64977574e+00, 2.60097147e+00, 2.54535965e+00, 2.48290251e+00, 2.41356958e+00, 2.33733779e+00, 2.25419149e+00, 2.16412252e+00, 2.06713025e+00, 1.96322159e+00, 1.85241105e+00, 1.73472072e+00, 1.61018033e+00, 1.47882721e+00, 1.34070633e+00, 1.19587027e+00, 1.04437922e+00, 8.86300945e-01, 7.21710769e-01, 5.50691541e-01, 3.73333594e-01, 1.89734696e-01, 4.80917673e-16, -1.89734696e-01, -3.73333594e-01, -5.50691541e-01, -7.21710769e-01, -8.86300945e-01, -1.04437922e+00, -1.19587027e+00, -1.34070633e+00, -1.47882721e+00, -1.61018033e+00, -1.73472072e+00, -1.85241105e+00, -1.96322159e+00, -2.06713025e+00, -2.16412252e+00, -2.25419149e+00, -2.33733779e+00, -2.41356958e+00, -2.48290251e+00, -2.54535965e+00, -2.60097147e+00, -2.64977574e+00, -2.69181751e+00, -2.72714900e+00, -2.75582955e+00, -2.77792552e+00, -2.79351018e+00, -2.80266368e+00, -2.80547286e+00, -2.80203121e+00, -2.79243874e+00, -2.77680184e+00, -2.75523316e+00, -2.72785150e+00, -2.69478167e+00, -2.65615433e+00, -2.61210587e+00, -2.56277824e+00, -2.50831879e+00, -2.44888015e+00, -2.38462001e+00, -2.31570101e+00, -2.24229050e+00, -2.16456044e+00, -2.08268715e+00, -1.99685118e+00, -1.90723707e+00, -1.81403322e+00, -1.71743163e+00, -1.61762777e+00, -1.51482031e+00, -1.40921097e+00, -1.30100429e+00, -1.19040744e+00, -1.07762999e+00, -9.62883697e-01, -8.46382306e-01, -7.28341326e-01, -6.08977815e-01, -4.88510160e-01, -3.67157856e-01, -2.45141287e-01, -1.22681503e-01;

        derfact_p.real() = real_p;
        derfact_p.imag() = imag_p;

        derfact_v.real() = real_v;
        derfact_v.imag() = imag_v;

        //debug check if derfact is correct
        WisdomCache wnd = WisdomCache();
        WisdomCache::Discretization discr1 = wnd.get_discretization(0.4, 128);
//        for(int i=0;i<128;i++){
//            std::cout << discr1.pressure_deriv_factors(i) <<"\n";
//        }
        derfact_v = discr1.velocity_deriv_factors;
        derfact_p = discr1.pressure_deriv_factors;

        int wlen = 32;
        Eigen::ArrayXf window(65);
        window << 0.00316228,0.00858261,0.02007542,0.0412163 ,0.07551126,0.12530442,0.19087516,0.27012564,0.35896633,0.45219639,0.54452377,0.63140816,0.7095588 ,0.77707471,0.83331485,0.8786185 ,0.9139817 ,0.94076063,0.96043711,0.97445482,0.98411922,0.9905474 ,0.99465322,0.99715493,0.9985956 ,0.99936947,0.9997499 ,0.99991624,0.99997804,0.99999609,0.99999966,0.99999999,1.        ,0.99999999,0.99999966,0.99999609,0.99997804,0.99991624,0.9997499 ,0.99936947,0.9985956 ,0.99715493,0.99465322,0.9905474 ,0.98411922,0.97445482,0.96043711,0.94076063,0.9139817 ,0.8786185 ,0.83331485,0.77707471,0.7095588 ,0.63140816,0.54452377,0.45219639,0.35896633,0.27012564,0.19087516,0.12530442,0.07551126,0.0412163 ,0.02007542,0.00858261,0.00316228;

        RhoArray rho_array = get_rho_array(1.2, 1.2, 1.2);

        Eigen::ArrayXXf spatresult_pressin = spatderp3(d1p.sin(), d2p.sin(), d3p.sin(), derfact_p, rho_array, window, wlen,
                                                    CalculationType::PRESSURE, CalcDirection::X);
        Eigen::ArrayXXf spatresult_velosin = spatderp3(d1v.sin(), d2v.sin(), d3v.sin(), derfact_v, rho_array, window, wlen,
                                                    CalculationType::VELOCITY, CalcDirection::X);

        Eigen::ArrayXXf spatexpectation_pressin(4, 51), spatexpectation_velosin(4, 50);
        spatexpectation_pressin = d2v.cos();
        spatexpectation_velosin = d2p.cos();
        
        BOOST_CHECK(spatexpectation_pressin.isApprox(spatresult_pressin));
        BOOST_CHECK(spatexpectation_velosin.isApprox(spatresult_velosin));
    }

    BOOST_AUTO_TEST_CASE(window_generator) {
        Eigen::ArrayXf window_verify(65), wind_gen(65);
        window_verify << 0.00316228,0.00858261,0.02007542,0.0412163 ,0.07551126,0.12530442,0.19087516,0.27012564,0.35896633,0.45219639,0.54452377,0.63140816,0.7095588 ,0.77707471,0.83331485,0.8786185 ,0.9139817 ,0.94076063,0.96043711,0.97445482,0.98411922,0.9905474 ,0.99465322,0.99715493,0.9985956 ,0.99936947,0.9997499 ,0.99991624,0.99997804,0.99999609,0.99999966,0.99999999,1.        ,0.99999999,0.99999966,0.99999609,0.99997804,0.99991624,0.9997499 ,0.99936947,0.9985956 ,0.99715493,0.99465322,0.9905474 ,0.98411922,0.97445482,0.96043711,0.94076063,0.9139817 ,0.8786185 ,0.83331485,0.77707471,0.7095588 ,0.63140816,0.54452377,0.45219639,0.35896633,0.27012564,0.19087516,0.12530442,0.07551126,0.0412163 ,0.02007542,0.00858261,0.00316228;
        wind_gen = get_window_coefficients(32,70);
        BOOST_CHECK(window_verify.isApprox(wind_gen));
    }


BOOST_AUTO_TEST_SUITE_END()
