//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 3-6-2016
//
//
// Authors: M. R. Fortuin
//
//
// Purpose:
//
//
//////////////////////////////////////////////////////////////////////////

#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include <kernel/DG/DG.h>
#include <kernel/DG/RK.h>
#include <kernel/DG/Advec.h>

using namespace OpenPSTD::Kernel::DG;
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DG)
    BOOST_AUTO_TEST_SUITE(DG_General)

        BOOST_AUTO_TEST_CASE(DG_General_x_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(9,10);
            xExpected <<
                    0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.010024200458854	,	0.210024200458854	,	0.410024200458854	,	0.610024200458854	,	0.810024200458854	,	1.010024200458850	,	1.210024200458850	,	1.410024200458850	,	1.610024200458850	,	1.810024200458850	,
                    0.032281372048926	,	0.232281372048926	,	0.432281372048926	,	0.632281372048926	,	0.832281372048926	,	1.032281372048920	,	1.232281372048920	,	1.432281372048920	,	1.632281372048920	,	1.832281372048920	,
                    0.063688253617382	,	0.263688253617382	,	0.463688253617382	,	0.663688253617382	,	0.863688253617382	,	1.063688253617380	,	1.263688253617380	,	1.463688253617380	,	1.663688253617380	,	1.863688253617380	,
                    0.100000000000000	,	0.300000000000000	,	0.500000000000000	,	0.700000000000000	,	0.900000000000000	,	1.100000000000000	,	1.300000000000000	,	1.500000000000000	,	1.700000000000000	,	1.900000000000000	,
                    0.136311746382618	,	0.336311746382618	,	0.536311746382618	,	0.736311746382618	,	0.936311746382618	,	1.136311746382610	,	1.336311746382610	,	1.536311746382610	,	1.736311746382610	,	1.936311746382610	,
                    0.167718627951074	,	0.367718627951074	,	0.567718627951074	,	0.767718627951074	,	0.967718627951074	,	1.167718627951070	,	1.367718627951070	,	1.567718627951070	,	1.767718627951070	,	1.967718627951070	,
                    0.189975799541146	,	0.389975799541146	,	0.589975799541146	,	0.789975799541146	,	0.989975799541146	,	1.189975799541140	,	1.389975799541140	,	1.589975799541140	,	1.789975799541140	,	1.989975799541140	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(9,10);
            for(int k = 0; k  < K; k++)
            {
                x.col(k) = s->Elements[k]->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_vertices_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(2,10);
            xExpected <<
            0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(2,10);
            for(int k = 0; k  < K; k++)
            {
                x(0, k) = s->Elements[k]->Faces[0]->Vertex.lock()->x;
                x(1, k) = s->Elements[k]->Faces[1]->Vertex.lock()->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_Normals_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(2,10);
            xExpected <<
                    -1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,
                    1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	;


            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(2,10);
            for(int k = 0; k  < K; k++)
            {
                x(0, k) = s->Elements[k]->Faces[0]->Normal[0];
                x(1, k) = s->Elements[k]->Faces[1]->Normal[0];
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_rx_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> rxExpected(9,10);
            rxExpected <<
                    9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000300	,	10.000000000000300	,	10.000000000000300	,	10.000000000000700	,	9.999999999999760	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	9.999999999999860	,	9.999999999999920	,	10.000000000000000	,	9.999999999999940	,	9.999999999999850	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	9.999999999999980	,	9.999999999999970	,
                    10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000100	,
                    9.999999999999980	,	9.999999999999990	,	9.999999999999990	,	9.999999999999980	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999910	,	9.999999999999990	,	10.000000000000000	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999940	,	10.000000000000000	,	9.999999999999900	,	10.000000000000000	,	9.999999999999970	,	9.999999999999940	,
                    9.999999999999990	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	9.999999999999920	,	10.000000000000000	,	9.999999999999990	,
                    9.999999999999970	,	9.999999999999990	,	9.999999999999940	,	9.999999999999990	,	9.999999999999940	,	9.999999999999940	,	10.000000000000000	,	9.999999999999850	,	9.999999999999850	,	10.000000000000000	,
                    10.000000000000000	,	9.999999999999940	,	9.999999999999850	,	10.000000000000000	,	9.999999999999850	,	10.000000000000200	,	9.999999999999500	,	9.999999999999850	,	10.000000000000500	,	9.999999999999140	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> rx(9,10);
            for(int k = 0; k  < K; k++)
            {
                rx.col(k) = s->Elements[k]->rx;
            }

            BOOST_CHECK(rx.isApprox(rxExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_fscale_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> fscaleExpected(2,10);
            fscaleExpected <<
                    9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000300	,	10.000000000000300	,	10.000000000000300	,	10.000000000000700	,	9.999999999999760	,
                    10.000000000000000	,	9.999999999999940	,	9.999999999999850	,	10.000000000000000	,	9.999999999999850	,	10.000000000000200	,	9.999999999999500	,	9.999999999999850	,	10.000000000000500	,	9.999999999999140	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> fscale(2,10);
            for(int k = 0; k  < K; k++)
            {
                fscale.col(k) = s->Elements[k]->Fscale;
            }

            BOOST_CHECK(fscale.isApprox(fscaleExpected));
        }
    BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()