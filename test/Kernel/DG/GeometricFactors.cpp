//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 1-6-2016
//
//
// Authors: M. R. Fortuin
//
//
// Purpose:
//
//
//////////////////////////////////////////////////////////////////////////

#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include <kernel/DG/GeometricFactors.h>

using namespace OpenPSTD::Kernel::DG;
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DG)
    BOOST_AUTO_TEST_SUITE(GeometricFactors)
        BOOST_AUTO_TEST_CASE(GeometricFactors_J_1D_8) {
            int N = 3;
            MatrixX<double> Dr(9, 9);
            MatrixX<double> x(9, 10);
            MatrixX<double> JExpected(9, 10);

            x <<
                    0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.010024200458854	,	0.210024200458854	,	0.410024200458854	,	0.610024200458854	,	0.810024200458854	,	1.010024200458850	,	1.210024200458850	,	1.410024200458850	,	1.610024200458850	,	1.810024200458850	,
                    0.032281372048926	,	0.232281372048926	,	0.432281372048926	,	0.632281372048926	,	0.832281372048926	,	1.032281372048920	,	1.232281372048920	,	1.432281372048920	,	1.632281372048920	,	1.832281372048920	,
                    0.063688253617382	,	0.263688253617382	,	0.463688253617382	,	0.663688253617382	,	0.863688253617382	,	1.063688253617380	,	1.263688253617380	,	1.463688253617380	,	1.663688253617380	,	1.863688253617380	,
                    0.100000000000000	,	0.300000000000000	,	0.500000000000000	,	0.700000000000000	,	0.900000000000000	,	1.100000000000000	,	1.300000000000000	,	1.500000000000000	,	1.700000000000000	,	1.900000000000000	,
                    0.136311746382618	,	0.336311746382618	,	0.536311746382618	,	0.736311746382618	,	0.936311746382618	,	1.136311746382610	,	1.336311746382610	,	1.536311746382610	,	1.736311746382610	,	1.936311746382610	,
                    0.167718627951074	,	0.367718627951074	,	0.567718627951074	,	0.767718627951074	,	0.967718627951074	,	1.167718627951070	,	1.367718627951070	,	1.567718627951070	,	1.767718627951070	,	1.967718627951070	,
                    0.189975799541146	,	0.389975799541146	,	0.589975799541146	,	0.789975799541146	,	0.989975799541146	,	1.189975799541140	,	1.389975799541140	,	1.589975799541140	,	1.789975799541140	,	1.989975799541140	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            Dr <<
                    -18.000000000000000	,	24.349745171593000	,	-9.738701657211500	,	5.544963906949350	,	-3.657142857142840	,	2.590745676559340	,	-1.874440873446970	,	1.284830632699580	,	-0.499999999999996	,
                    -4.087013702033680	,	0.000000000000007	,	5.786805816637310	,	-2.696065440314060	,	1.665221645005380	,	-1.145653738455130	,	0.816756381741389	,	-0.555704981283718	,	0.215654018702498	,
                    0.985360090074508	,	-3.488358753434440	,	-0.000000000000012	,	3.576680940125620	,	-1.717832157195060	,	1.079803811282630	,	-0.738349277190387	,	0.492350938315508	,	-0.189655591978357	,
                    -0.444613449281090	,	1.287960750063900	,	-2.834458912079420	,	0.000000000000001	,	2.851915968462890	,	-1.376964893760510	,	0.855726185092677	,	-0.547300160534051	,	0.207734512035596	,
                    0.273437500000000	,	-0.741782397916254	,	1.269413086358140	,	-2.659310217573910	,	0.000000000000002	,	2.659310217573910	,	-1.269413086358150	,	0.741782397916255	,	-0.273437500000000	,
                    -0.207734512035597	,	0.547300160534051	,	-0.855726185092674	,	1.376964893760510	,	-2.851915968462890	,	-0.000000000000003	,	2.834458912079420	,	-1.287960750063900	,	0.444613449281089	,
                    0.189655591978357	,	-0.492350938315506	,	0.738349277190384	,	-1.079803811282620	,	1.717832157195060	,	-3.576680940125610	,	-0.000000000000002	,	3.488358753434450	,	-0.985360090074504	,
                    -0.215654018702500	,	0.555704981283716	,	-0.816756381741386	,	1.145653738455130	,	-1.665221645005380	,	2.696065440314060	,	-5.786805816637330	,	0.000000000000043	,	4.087013702033650	,
                    0.500000000000002	,	-1.284830632699570	,	1.874440873446970	,	-2.590745676559350	,	3.657142857142850	,	-5.544963906949370	,	9.738701657211560	,	-24.349745171593000	,	17.999999999999900	;


            JExpected <<
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.099999999999996	,	0.099999999999997	,	0.099999999999997	,	0.099999999999993	,	0.100000000000002	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.100000000000000	,	0.099999999999999	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.099999999999999	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000000	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,
                    0.099999999999999	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.099999999999998	,	0.100000000000005	,	0.100000000000001	,	0.099999999999994	,	0.100000000000009	;


            MatrixX<double> J = GeometricFactors1D_J<double>(x, Dr);
            BOOST_CHECK(J.isApprox(JExpected));
        }


        BOOST_AUTO_TEST_CASE(GeometricFactors_rx_1D_8) {
            MatrixX<double> rxExpected(9, 10);
            MatrixX<double> J(9, 10);

            J <<
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.099999999999996	,	0.099999999999997	,	0.099999999999997	,	0.099999999999993	,	0.100000000000002	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.100000000000000	,	0.099999999999999	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.099999999999999	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.099999999999999	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000000	,
                    0.100000000000000	,	0.100000000000000	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,
                    0.099999999999999	,	0.100000000000001	,	0.100000000000001	,	0.100000000000000	,	0.100000000000001	,	0.099999999999998	,	0.100000000000005	,	0.100000000000001	,	0.099999999999994	,	0.100000000000009	;



            rxExpected <<
                    9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000300	,	10.000000000000300	,	10.000000000000300	,	10.000000000000700	,	9.999999999999760	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	9.999999999999860	,	9.999999999999920	,	10.000000000000000	,	9.999999999999940	,	9.999999999999850	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	9.999999999999980	,	9.999999999999970	,
                    10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000100	,
                    9.999999999999980	,	9.999999999999990	,	9.999999999999990	,	9.999999999999980	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999910	,	9.999999999999990	,	10.000000000000000	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999940	,	10.000000000000000	,	9.999999999999900	,	10.000000000000000	,	9.999999999999970	,	9.999999999999940	,
                    9.999999999999990	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	9.999999999999920	,	10.000000000000000	,	9.999999999999990	,
                    9.999999999999970	,	9.999999999999990	,	9.999999999999940	,	9.999999999999990	,	9.999999999999940	,	9.999999999999940	,	10.000000000000000	,	9.999999999999850	,	9.999999999999850	,	10.000000000000000	,
                    10.000000000000000	,	9.999999999999940	,	9.999999999999850	,	10.000000000000000	,	9.999999999999850	,	10.000000000000200	,	9.999999999999500	,	9.999999999999850	,	10.000000000000500	,	9.999999999999140	;



            MatrixX<double> rx = GeometricFactors1D_rx<double>(J);
            BOOST_CHECK(rx.isApprox(rxExpected));
        }

        BOOST_AUTO_TEST_CASE(GeometricFactors_J_rx_1D_8) {
            int N = 3;
            MatrixX<double> Dr(9, 9);
            MatrixX<double> x(9, 10);
            MatrixX<double> rxExpected(9, 10);

            x <<
            0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.010024200458854	,	0.210024200458854	,	0.410024200458854	,	0.610024200458854	,	0.810024200458854	,	1.010024200458850	,	1.210024200458850	,	1.410024200458850	,	1.610024200458850	,	1.810024200458850	,
                    0.032281372048926	,	0.232281372048926	,	0.432281372048926	,	0.632281372048926	,	0.832281372048926	,	1.032281372048920	,	1.232281372048920	,	1.432281372048920	,	1.632281372048920	,	1.832281372048920	,
                    0.063688253617382	,	0.263688253617382	,	0.463688253617382	,	0.663688253617382	,	0.863688253617382	,	1.063688253617380	,	1.263688253617380	,	1.463688253617380	,	1.663688253617380	,	1.863688253617380	,
                    0.100000000000000	,	0.300000000000000	,	0.500000000000000	,	0.700000000000000	,	0.900000000000000	,	1.100000000000000	,	1.300000000000000	,	1.500000000000000	,	1.700000000000000	,	1.900000000000000	,
                    0.136311746382618	,	0.336311746382618	,	0.536311746382618	,	0.736311746382618	,	0.936311746382618	,	1.136311746382610	,	1.336311746382610	,	1.536311746382610	,	1.736311746382610	,	1.936311746382610	,
                    0.167718627951074	,	0.367718627951074	,	0.567718627951074	,	0.767718627951074	,	0.967718627951074	,	1.167718627951070	,	1.367718627951070	,	1.567718627951070	,	1.767718627951070	,	1.967718627951070	,
                    0.189975799541146	,	0.389975799541146	,	0.589975799541146	,	0.789975799541146	,	0.989975799541146	,	1.189975799541140	,	1.389975799541140	,	1.589975799541140	,	1.789975799541140	,	1.989975799541140	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            Dr <<
            -18.000000000000000	,	24.349745171593000	,	-9.738701657211500	,	5.544963906949350	,	-3.657142857142840	,	2.590745676559340	,	-1.874440873446970	,	1.284830632699580	,	-0.499999999999996	,
                    -4.087013702033680	,	0.000000000000007	,	5.786805816637310	,	-2.696065440314060	,	1.665221645005380	,	-1.145653738455130	,	0.816756381741389	,	-0.555704981283718	,	0.215654018702498	,
                    0.985360090074508	,	-3.488358753434440	,	-0.000000000000012	,	3.576680940125620	,	-1.717832157195060	,	1.079803811282630	,	-0.738349277190387	,	0.492350938315508	,	-0.189655591978357	,
                    -0.444613449281090	,	1.287960750063900	,	-2.834458912079420	,	0.000000000000001	,	2.851915968462890	,	-1.376964893760510	,	0.855726185092677	,	-0.547300160534051	,	0.207734512035596	,
                    0.273437500000000	,	-0.741782397916254	,	1.269413086358140	,	-2.659310217573910	,	0.000000000000002	,	2.659310217573910	,	-1.269413086358150	,	0.741782397916255	,	-0.273437500000000	,
                    -0.207734512035597	,	0.547300160534051	,	-0.855726185092674	,	1.376964893760510	,	-2.851915968462890	,	-0.000000000000003	,	2.834458912079420	,	-1.287960750063900	,	0.444613449281089	,
                    0.189655591978357	,	-0.492350938315506	,	0.738349277190384	,	-1.079803811282620	,	1.717832157195060	,	-3.576680940125610	,	-0.000000000000002	,	3.488358753434450	,	-0.985360090074504	,
                    -0.215654018702500	,	0.555704981283716	,	-0.816756381741386	,	1.145653738455130	,	-1.665221645005380	,	2.696065440314060	,	-5.786805816637330	,	0.000000000000043	,	4.087013702033650	,
                    0.500000000000002	,	-1.284830632699570	,	1.874440873446970	,	-2.590745676559350	,	3.657142857142850	,	-5.544963906949370	,	9.738701657211560	,	-24.349745171593000	,	17.999999999999900	;


            rxExpected <<
            9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000300	,	10.000000000000300	,	10.000000000000300	,	10.000000000000700	,	9.999999999999760	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	9.999999999999860	,	9.999999999999920	,	10.000000000000000	,	9.999999999999940	,	9.999999999999850	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	9.999999999999980	,	9.999999999999970	,
                    10.000000000000000	,	9.999999999999990	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999990	,	10.000000000000100	,
                    9.999999999999980	,	9.999999999999990	,	9.999999999999990	,	9.999999999999980	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999910	,	9.999999999999990	,	10.000000000000000	,
                    10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	9.999999999999940	,	10.000000000000000	,	9.999999999999900	,	10.000000000000000	,	9.999999999999970	,	9.999999999999940	,
                    9.999999999999990	,	10.000000000000000	,	9.999999999999950	,	10.000000000000000	,	10.000000000000000	,	9.999999999999970	,	10.000000000000000	,	9.999999999999920	,	10.000000000000000	,	9.999999999999990	,
                    9.999999999999970	,	9.999999999999990	,	9.999999999999940	,	9.999999999999990	,	9.999999999999940	,	9.999999999999940	,	10.000000000000000	,	9.999999999999850	,	9.999999999999850	,	10.000000000000000	,
                    10.000000000000000	,	9.999999999999940	,	9.999999999999850	,	10.000000000000000	,	9.999999999999850	,	10.000000000000200	,	9.999999999999500	,	9.999999999999850	,	10.000000000000500	,	9.999999999999140	;


            MatrixX<double> rx = GeometricFactors1D_rx<double>(x, Dr);
            BOOST_CHECK(rx.isApprox(rxExpected));
        }
    BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
